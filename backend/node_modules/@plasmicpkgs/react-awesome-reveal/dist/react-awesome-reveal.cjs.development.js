'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var registerComponent = _interopDefault(require('@plasmicapp/host/registerComponent'));
var React = _interopDefault(require('react'));
var reactAwesomeReveal = require('react-awesome-reveal');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var effectNameToComponent = {
  bounce: reactAwesomeReveal.Bounce,
  fade: reactAwesomeReveal.Fade,
  flip: reactAwesomeReveal.Flip,
  hinge: reactAwesomeReveal.Hinge,
  jackinthebox: reactAwesomeReveal.JackInTheBox,
  roll: reactAwesomeReveal.Roll,
  rotate: reactAwesomeReveal.Rotate,
  slide: reactAwesomeReveal.Slide,
  zoom: reactAwesomeReveal.Zoom
};
var effects = /*#__PURE__*/Object.keys(effectNameToComponent);
function Reveal(_ref) {
  var _ref$effect = _ref.effect,
      effect = _ref$effect === void 0 ? "fade" : _ref$effect,
      props = _objectWithoutPropertiesLoose(_ref, ["effect", "className"]);

  var Comp = effectNameToComponent[effect];

  if (!Comp) {
    throw new Error("Please specify a valid effect: " + effects.join(", "));
  } // Rendering plain strings seems to result in an infinite loop from
  // "react-awesome-reveal" (except for when `cascading` is set).
  // So we create a wrapper `div`.


  var children = props.cascade || !["string", "number", "boolean"].includes(typeof props.children) ? props.children : React.createElement("div", null, " ", props.children, " ");
  return React.createElement(Comp, Object.assign({}, props, {
    children: children
  }));
}
registerComponent(Reveal, {
  name: "Reveal",
  importPath: "@plasmicpkgs/react-awesome-reveal",
  props: {
    big: {
      type: "boolean",
      displayName: "Big",
      description: "Causes the animation to start farther. Only applied to \"fade\" Effect and \"down\", \"left\", \"right\" and \"up\" directions"
    },
    cascade: {
      type: "boolean",
      displayName: "Cascade",
      description: "Stagger its children animations"
    },
    children: {
      type: "slot",
      defaultValue: "Reveal text"
    },
    damping: {
      type: "number",
      displayName: "Damping",
      description: "Factor that affects the delay that each animated element in a cascade animation will be assigned (defaults to 0.5)"
    },
    delay: {
      type: "number",
      displayName: "Delay",
      description: "Initial delay, in milliseconds"
    },
    direction: {
      type: "choice",
      options: ["horizontal", "vertical", "bottom-left", "bottom-right", "down", "left", "right", "top-left", "top-right", "up"],
      displayName: "Direction",
      description: "Origin of the animation (the valid values depend on the chosen Effect)"
    },
    duration: {
      type: "number",
      displayName: "Duration",
      description: "Animation duration, in milliseconds (defaults to 1000)"
    },
    effect: {
      type: "choice",
      options: effects.map(function (v) {
        return v;
      }),
      displayName: "Effect",
      description: "The Reveal animation effect to be applied"
    },
    fraction: {
      type: "number",
      displayName: "Fraction",
      description: "Float number between 0 and 1 indicating how much the element should be in viewport before the animation is triggered"
    },
    reverse: {
      type: "boolean",
      displayName: "Reverse",
      description: "Whether the animation should make element(s) disappear. Not applied to \"hinge\" and \"jackinthebox\" effects"
    },
    triggerOnce: {
      type: "boolean",
      displayName: "Trigger Once",
      description: "Whether the animation should run only once, instead of everytime the element enters, exits and re-enters the viewport"
    }
  }
});

exports.Reveal = Reveal;
//# sourceMappingURL=react-awesome-reveal.cjs.development.js.map
