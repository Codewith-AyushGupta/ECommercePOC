import "@plasmicapp/preamble";
import * as React from "react";
import { registerFetcher as unstable_registerFetcher } from "./data";
import { PlasmicElement } from "./element-types";
import registerComponent, { ComponentMeta, ComponentRegistration, ComponentTemplates, PrimitiveType, PropType } from "./registerComponent";
import repeatedElement from "./repeatedElement";
export { unstable_registerFetcher };
export { repeatedElement };
export { registerComponent, ComponentMeta, ComponentRegistration, ComponentTemplates, PrimitiveType, PropType, };
export { PlasmicElement };
declare global {
    interface Window {
        __PlasmicHostVersion: string;
    }
}
/**
 * React context to detect whether the component is rendered on Plasmic editor.
 */
export declare const PlasmicCanvasContext: React.Context<boolean>;
interface PlasmicCanvasHostProps {
    /**
     * Webpack hmr uses EventSource to	listen to hot reloads, but that
     * resultsin a persistent	connection from	each window.  In Plasmic
     * Studio, if a project is configured to use app-hosting with a
     * nextjs or gatsby server running in dev mode, each artboard will
     * be holding a persistent connection to the dev server.
     * Because browsers	have a limit to	how many connections can
     * be held	at a time by domain, this means	after X	artboards, new
     * artboards will freeze and not load.
     *
     * By default, <PlasmicCanvasHost /> will globally mutate
     * window.EventSource to avoid using EventSource for HMR, which you
     * typically don't need for your custom host page.  If you do still
     * want to retain HRM, then youc an pass enableWebpackHmr={true}.
     */
    enableWebpackHmr?: boolean;
}
export declare const PlasmicCanvasHost: React.FunctionComponent<PlasmicCanvasHostProps>;
