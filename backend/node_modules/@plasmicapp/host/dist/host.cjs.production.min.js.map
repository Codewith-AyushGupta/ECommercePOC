{"version":3,"file":"host.cjs.production.min.js","sources":["../src/data.ts","../src/registerComponent.ts","../src/repeatedElement.ts","../src/index.tsx","../src/lang-utils.ts","../src/useForceUpdate.ts"],"sourcesContent":["import { PrimitiveType } from \"./index\";\nconst root = globalThis as any;\n\nexport type Fetcher = (...args: any[]) => Promise<any>;\n\nexport interface FetcherMeta {\n  /**\n   * Any unique identifying string for this fetcher.\n   */\n  name: string;\n  /**\n   * The Studio-user-friendly display name.\n   */\n  displayName?: string;\n  /**\n   * The symbol to import from the importPath.\n   */\n  importName?: string;\n  args: { name: string; type: PrimitiveType }[];\n  returns: PrimitiveType;\n  /**\n   * Either the path to the fetcher relative to `rootDir` or the npm\n   * package name\n   */\n  importPath: string;\n  /**\n   * Whether it's a default export or named export\n   */\n  isDefaultExport?: boolean;\n}\n\nexport interface FetcherRegistration {\n  fetcher: Fetcher;\n  meta: FetcherMeta;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicFetcherRegistry: FetcherRegistration[];\n  }\n}\n\nroot.__PlasmicFetcherRegistry = [];\n\nexport function registerFetcher(fetcher: Fetcher, meta: FetcherMeta) {\n  root.__PlasmicFetcherRegistry.push({ fetcher, meta });\n}\n","import {\n  CodeComponentElement,\n  CSSProperties,\n  PlasmicElement,\n} from \"./element-types\";\n\nconst root = globalThis as any;\n\ntype PropTypeBase = {\n  displayName?: string;\n  description?: string;\n};\n\ntype StringType =\n  | \"string\"\n  | ({\n      type: \"string\";\n      defaultValue?: string;\n    } & PropTypeBase);\n\ntype BooleanType =\n  | \"boolean\"\n  | ({\n      type: \"boolean\";\n      defaultValue?: boolean;\n    } & PropTypeBase);\n\ntype NumberType =\n  | \"number\"\n  | ({\n      type: \"number\";\n      defaultValue?: number;\n    } & PropTypeBase);\n\ntype JSONLikeType =\n  | \"object\"\n  | ({\n      type: \"object\";\n      /**\n       * Expects a JSON-compatible value\n       */\n      defaultValue?: any;\n    } & PropTypeBase);\n\ntype ChoiceType = {\n  type: \"choice\";\n  options: string[];\n  defaultValue?: string;\n} & PropTypeBase;\n\ntype SlotType =\n  | \"slot\"\n  | {\n      type: \"slot\";\n      /**\n       * The unique names of all code components that can be placed in the slot\n       */\n      allowedComponents?: string[];\n      defaultValue?: PlasmicElement | PlasmicElement[];\n    };\n\nexport type PrimitiveType = Extract<\n  StringType | BooleanType | NumberType | JSONLikeType,\n  String\n>;\n\ntype ControlTypeBase =\n  | {\n      editOnly?: false;\n    }\n  | {\n      editOnly: true;\n      /**\n       * The prop where the values should be mapped to\n       */\n      uncontrolledProp?: string;\n    };\n\ntype SupportControlled<T> =\n  | Extract<T, String>\n  | (Exclude<T, String> & ControlTypeBase);\n\nexport type PropType =\n  | SupportControlled<\n      StringType | BooleanType | NumberType | JSONLikeType | ChoiceType\n    >\n  | SlotType;\n\ntype RestrictPropType<T> = T extends string\n  ? SupportControlled<StringType | ChoiceType | JSONLikeType>\n  : T extends boolean\n  ? SupportControlled<BooleanType | JSONLikeType>\n  : T extends number\n  ? SupportControlled<NumberType | JSONLikeType>\n  : PropType;\n\ninterface ComponentTemplate<P>\n  extends Omit<CodeComponentElement<P>, \"type\" | \"name\"> {\n  /**\n   * A preview picture for the template.\n   */\n  previewImg?: string;\n}\n\nexport interface ComponentTemplates<P> {\n  [name: string]: ComponentTemplate<P>;\n}\n\nexport interface ComponentMeta<P> {\n  /**\n   * Any unique string name used to identify that component. Each component\n   * should be registered with a different `meta.name`, even if they have the\n   * same name in the code.\n   */\n  name: string;\n  /**\n   * The name to be displayed for the component in Studio. Optional: if not\n   * specified, `meta.name` is used.\n   */\n  displayName?: string;\n  /**\n   * The javascript name to be used when generating code. Optional: if not\n   * provided, `meta.name` is used.\n   */\n  importName?: string;\n  /**\n   * An object describing the component properties to be used in Studio.\n   * For each `prop`, there should be an entry `meta.props[prop]` describing\n   * its type.\n   */\n  props: { [prop in keyof Partial<P>]: RestrictPropType<P[prop]> } & {\n    [prop: string]: PropType;\n  };\n  /**\n   * The path to be used when importing the component in the generated code.\n   * It can be the name of the package that contains the component, or the path\n   * to the file in the project (relative to the root directory).\n   */\n  importPath: string;\n  /**\n   *  Whether the component is the default export from that path. Optional: if\n   * not specified, it's considered `false`.\n   */\n  isDefaultExport?: boolean;\n  /**\n   * The prop that expects the CSS classes with styles to be applied to the\n   * component. Optional: if not specified, Plasmic will expect it to be\n   * `className`. Notice that if the component does not accept CSS classes, the\n   * component will not be able to receive styles from the Studio.\n   */\n  classNameProp?: string;\n  /**\n   * The prop that receives and forwards a React `ref`. Plasmic only uses `ref`\n   * to interact with components, so it's not used in the generated code.\n   * Optional: If not provided, the usual `ref` is used.\n   */\n  refProp?: string;\n  /**\n   * Default styles to start with when instantiating the component in Plasmic.\n   */\n  defaultStyles?: CSSProperties;\n  /**\n   * Component templates to start with on Plasmic.\n   */\n  templates?: ComponentTemplates<P>;\n}\n\nexport interface ComponentRegistration {\n  component: React.ComponentType<any>;\n  meta: ComponentMeta<any>;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicComponentRegistry: ComponentRegistration[];\n  }\n}\n\nif (root.__PlasmicComponentRegistry == null) {\n  root.__PlasmicComponentRegistry = [];\n}\n\nexport default function registerComponent<T extends React.ComponentType<any>>(\n  component: T,\n  meta: ComponentMeta<React.ComponentProps<T>>\n) {\n  root.__PlasmicComponentRegistry.push({ component, meta });\n}\n","import { cloneElement, isValidElement } from \"react\";\n\n/**\n * Allows a component from Plasmic Studio to be repeated.\n * `isPrimary` should be true for at most one instance of the component, and\n * indicates which copy of the element will be highlighted when the element is\n * selected in Studio.\n * If `isPrimary` is `false`, and `elt` is a React element (or an array of such),\n * it'll be cloned (using React.cloneElement) and ajusted if it's a component\n * from Plasmic Studio. Otherwise, if `elt` is not a React element, the original\n * value is returned.\n */\nexport default function repeatedElement<T,>(isPrimary: boolean, elt: T): T {\n  return repeatedElementFn(isPrimary, elt);\n}\n\nlet repeatedElementFn = <T,>(isPrimary: boolean, elt: T): T => {\n  if (isPrimary) {\n    return elt;\n  }\n  if (Array.isArray(elt)) {\n    return elt.map((v) => repeatedElement(isPrimary, v)) as any as T;\n  }\n  if (elt && isValidElement(elt) && typeof elt !== \"string\") {\n    return cloneElement(elt) as any as T;\n  }\n  return elt;\n}\n\nexport function setRepeatedElementFn(fn: typeof repeatedElement) {\n  repeatedElementFn = fn;\n}\n\n\n","// tslint:disable:ordered-imports\n// organize-imports-ignore\nimport \"@plasmicapp/preamble\";\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { registerFetcher as unstable_registerFetcher } from \"./data\";\nimport { PlasmicElement } from \"./element-types\";\nimport { ensure } from \"./lang-utils\";\nimport registerComponent, {\n  ComponentMeta,\n  ComponentRegistration,\n  ComponentTemplates,\n  PrimitiveType,\n  PropType,\n} from \"./registerComponent\";\nimport repeatedElement, { setRepeatedElementFn } from \"./repeatedElement\";\nimport useForceUpdate from \"./useForceUpdate\";\nconst root = globalThis as any;\n\nexport { unstable_registerFetcher };\nexport { repeatedElement };\nexport {\n  registerComponent,\n  ComponentMeta,\n  ComponentRegistration,\n  ComponentTemplates,\n  PrimitiveType,\n  PropType,\n};\nexport { PlasmicElement };\n\ndeclare global {\n  interface Window {\n    __PlasmicHostVersion: string;\n  }\n}\n\nif (root.__PlasmicHostVersion == null) {\n  root.__PlasmicHostVersion = \"1\";\n}\n\nconst rootChangeListeners: (() => void)[] = [];\nclass PlasmicRootNodeWrapper {\n  constructor(private value: null | React.ReactElement) {}\n  set = (val: null | React.ReactElement) => {\n    this.value = val;\n    rootChangeListeners.forEach((f) => f());\n  };\n  get = () => this.value;\n}\n\nconst plasmicRootNode = new PlasmicRootNodeWrapper(null);\n\nif (root.__Sub == null) {\n  root.__Sub = {\n    React,\n    ReactDOM,\n    setPlasmicRootNode,\n    registerRenderErrorListener,\n    repeatedElement,\n    setRepeatedElementFn,\n  };\n}\n\nfunction getPlasmicOrigin() {\n  const params = new URL(`https://fakeurl/${location.hash.replace(/#/, \"?\")}`)\n    .searchParams;\n  return ensure(\n    params.get(\"origin\"),\n    \"Missing information from Plasmic window.\"\n  );\n}\n\nfunction renderStudioIntoIframe() {\n  const script = document.createElement(\"script\");\n  const plasmicOrigin = getPlasmicOrigin();\n  script.src = plasmicOrigin + \"/static/js/studio.js\";\n  document.body.appendChild(script);\n}\n\nlet renderCount = 0;\nfunction setPlasmicRootNode(node: React.ReactElement | null) {\n  // Keep track of renderCount, which we use as key to ErrorBoundary, so\n  // we can reset the error on each render\n  renderCount++;\n  plasmicRootNode.set(node);\n}\n\n/**\n * React context to detect whether the component is rendered on Plasmic editor.\n */\nexport const PlasmicCanvasContext = React.createContext<boolean>(false);\n\nfunction _PlasmicCanvasHost() {\n  // If window.parent is null, then this is a window whose containing iframe\n  // has been detached from the DOM (for the top window, window.parent === window).\n  // In that case, we shouldn't do anything.  If window.parent is null, by the way,\n  // location.hash will also be null.\n  const isFrameAttached = !!window.parent;\n  const isCanvas = !!location.hash?.match(/\\bcanvas=true\\b/);\n  const isLive = !!location.hash?.match(/\\blive=true\\b/) || !isFrameAttached;\n  const shouldRenderStudio =\n    isFrameAttached &&\n    !document.querySelector(\"#plasmic-studio-tag\") &&\n    !isCanvas &&\n    !isLive;\n  const forceUpdate = useForceUpdate();\n  React.useLayoutEffect(() => {\n    rootChangeListeners.push(forceUpdate);\n    return () => {\n      const index = rootChangeListeners.indexOf(forceUpdate);\n      if (index >= 0) {\n        rootChangeListeners.splice(index, 1);\n      }\n    };\n  }, [forceUpdate]);\n  React.useEffect(() => {\n    if (shouldRenderStudio && isFrameAttached && window.parent !== window) {\n      renderStudioIntoIframe();\n    }\n  }, [shouldRenderStudio, isFrameAttached]);\n  React.useEffect(() => {\n    if (!shouldRenderStudio && !document.querySelector(\"#getlibs\") && isLive) {\n      const scriptElt = document.createElement(\"script\");\n      scriptElt.id = \"getlibs\";\n      scriptElt.src = getPlasmicOrigin() + \"/static/js/getlibs.js\";\n      scriptElt.async = false;\n      scriptElt.onload = () => {\n        (window as any).__GetlibsReadyResolver?.();\n      };\n      document.head.append(scriptElt);\n    }\n  }, [shouldRenderStudio]);\n  if (!isFrameAttached) {\n    return null;\n  }\n  if (isCanvas || isLive) {\n    let appDiv = document.querySelector(\"#plasmic-app.__wab_user-body\");\n    if (!appDiv) {\n      appDiv = document.createElement(\"div\");\n      appDiv.id = \"plasmic-app\";\n      appDiv.classList.add(\"__wab_user-body\");\n      document.body.appendChild(appDiv);\n    }\n    return ReactDOM.createPortal(\n      <ErrorBoundary key={`${renderCount}`}>\n        <PlasmicCanvasContext.Provider value={isCanvas}>\n          {plasmicRootNode.get()}\n        </PlasmicCanvasContext.Provider>\n      </ErrorBoundary>,\n      appDiv,\n      \"plasmic-app\"\n    );\n  }\n  if (shouldRenderStudio && window.parent === window) {\n    return (\n      <p>\n        Your app is ready to host Plasmic Studio! <br /> <br />\n        On the <a href=\"https://studio.plasmic.app/\">Dashboard</a>, click on the{\" \"}\n        <i>Config</i> button, and set{\" \"}\n        <code>{location.origin + location.pathname}</code> as the host URL.\n        <br />\n        <br />\n        You can find more information about app-hosting{\" \"}\n        <a href=\"https://www.plasmic.app/learn/app-hosting/\">here</a>.\n      </p>\n    );\n  }\n  return null;\n}\n\ninterface PlasmicCanvasHostProps {\n  /**\n   * Webpack hmr uses EventSource to\tlisten to hot reloads, but that\n   * resultsin a persistent\tconnection from\teach window.  In Plasmic\n   * Studio, if a project is configured to use app-hosting with a\n   * nextjs or gatsby server running in dev mode, each artboard will\n   * be holding a persistent connection to the dev server.\n   * Because browsers\thave a limit to\thow many connections can\n   * be held\tat a time by domain, this means\tafter X\tartboards, new\n   * artboards will freeze and not load.\n   *\n   * By default, <PlasmicCanvasHost /> will globally mutate\n   * window.EventSource to avoid using EventSource for HMR, which you\n   * typically don't need for your custom host page.  If you do still\n   * want to retain HRM, then youc an pass enableWebpackHmr={true}.\n   */\n  enableWebpackHmr?: boolean;\n}\n\nexport const PlasmicCanvasHost: React.FunctionComponent<PlasmicCanvasHostProps> = (\n  props\n) => {\n  const { enableWebpackHmr } = props;\n  const [node, setNode] = React.useState<React.ReactElement<any, any> | null>(\n    null\n  );\n  React.useEffect(() => {\n    setNode(<_PlasmicCanvasHost />);\n  }, []);\n  return (\n    <>\n      {!enableWebpackHmr && <DisableWebpackHmr />}\n      {node}\n    </>\n  );\n};\n\ntype RenderErrorListener = (err: Error) => void;\nconst renderErrorListeners: RenderErrorListener[] = [];\nfunction registerRenderErrorListener(listener: RenderErrorListener) {\n  renderErrorListeners.push(listener);\n  return () => {\n    const index = renderErrorListeners.indexOf(listener);\n    if (index >= 0) {\n      renderErrorListeners.splice(index, 1);\n    }\n  };\n}\n\ninterface ErrorBoundaryProps {\n  children?: React.ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  error?: Error;\n}\n\nclass ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {};\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { error };\n  }\n\n  componentDidCatch(error: Error) {\n    renderErrorListeners.forEach((listener) => listener(error));\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>Error: {`${this.state.error.message}`}</div>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nfunction DisableWebpackHmr() {\n  if (process.env.NODE_ENV === \"production\") {\n    return null;\n  }\n  return (\n    <script\n      type=\"text/javascript\"\n      dangerouslySetInnerHTML={{\n        __html: `\n      if (typeof window !== \"undefined\") {\n        const RealEventSource = window.EventSource;\n        window.EventSource = function(url, config) {\n          if (/[^a-zA-Z]hmr($|[^a-zA-Z])/.test(url)) {\n            console.warn(\"Plasmic: disabled EventSource request for\", url);\n            return {\n              onerror() {}, onmessage() {}, onopen() {}, close() {}\n            };\n          } else {\n            return new RealEventSource(url, config);\n          }\n        }\n      }\n      `,\n      }}\n    ></script>\n  );\n}\n","function isString(x: any): x is string {\n  return typeof x === \"string\";\n}\n\ntype StringGen = string | (() => string);\n\nexport function ensure<T>(x: T | null | undefined, msg: StringGen = \"\"): T {\n  if (x === null || x === undefined) {\n    debugger;\n    msg = (isString(msg) ? msg : msg()) || \"\";\n    throw new Error(\n      `Value must not be undefined or null${msg ? `- ${msg}` : \"\"}`\n    );\n  } else {\n    return x;\n  }\n}\n","import { useCallback, useState } from \"react\";\n\nexport default function useForceUpdate() {\n  const [, setTick] = useState(0);\n  const update = useCallback(() => {\n    setTick((tick) => tick + 1);\n  }, []);\n  return update;\n}\n"],"names":["root","globalThis","__PlasmicFetcherRegistry","repeatedElement","isPrimary","elt","repeatedElementFn","__PlasmicComponentRegistry","Array","isArray","map","v","isValidElement","cloneElement","__PlasmicHostVersion","rootChangeListeners","plasmicRootNode","value","val","_this","forEach","f","getPlasmicOrigin","x","msg","isString","Error","ensure","URL","location","hash","replace","searchParams","get","__Sub","React","ReactDOM","setPlasmicRootNode","node","renderCount","set","registerRenderErrorListener","listener","renderErrorListeners","push","index","indexOf","splice","setRepeatedElementFn","fn","PlasmicCanvasContext","_PlasmicCanvasHost","setTick","isFrameAttached","window","parent","isCanvas","_location$hash","match","isLive","_location$hash2","shouldRenderStudio","document","querySelector","forceUpdate","useState","useCallback","tick","script","plasmicOrigin","createElement","src","body","appendChild","scriptElt","id","async","onload","__GetlibsReadyResolver","head","append","appDiv","classList","add","ErrorBoundary","key","Provider","href","origin","pathname","props","state","getDerivedStateFromError","error","componentDidCatch","render","this","message","children","DisableWebpackHmr","enableWebpackHmr","setNode","component","meta","fetcher"],"mappings":"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"}