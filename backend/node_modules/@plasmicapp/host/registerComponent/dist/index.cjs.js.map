{"version":3,"file":"index.cjs.js","sources":["../../src/registerComponent.ts"],"sourcesContent":["import {\n  CodeComponentElement,\n  CSSProperties,\n  PlasmicElement,\n} from \"./element-types\";\n\nconst root = globalThis as any;\n\ntype PropTypeBase = {\n  displayName?: string;\n  description?: string;\n};\n\ntype StringType =\n  | \"string\"\n  | ({\n      type: \"string\";\n      defaultValue?: string;\n    } & PropTypeBase);\n\ntype BooleanType =\n  | \"boolean\"\n  | ({\n      type: \"boolean\";\n      defaultValue?: boolean;\n    } & PropTypeBase);\n\ntype NumberType =\n  | \"number\"\n  | ({\n      type: \"number\";\n      defaultValue?: number;\n    } & PropTypeBase);\n\ntype JSONLikeType =\n  | \"object\"\n  | ({\n      type: \"object\";\n      /**\n       * Expects a JSON-compatible value\n       */\n      defaultValue?: any;\n    } & PropTypeBase);\n\ntype ChoiceType = {\n  type: \"choice\";\n  options: string[];\n  defaultValue?: string;\n} & PropTypeBase;\n\ntype SlotType =\n  | \"slot\"\n  | {\n      type: \"slot\";\n      /**\n       * The unique names of all code components that can be placed in the slot\n       */\n      allowedComponents?: string[];\n      defaultValue?: PlasmicElement | PlasmicElement[];\n    };\n\nexport type PrimitiveType = Extract<\n  StringType | BooleanType | NumberType | JSONLikeType,\n  String\n>;\n\ntype ControlTypeBase =\n  | {\n      editOnly?: false;\n    }\n  | {\n      editOnly: true;\n      /**\n       * The prop where the values should be mapped to\n       */\n      uncontrolledProp?: string;\n    };\n\ntype SupportControlled<T> =\n  | Extract<T, String>\n  | (Exclude<T, String> & ControlTypeBase);\n\nexport type PropType =\n  | SupportControlled<\n      StringType | BooleanType | NumberType | JSONLikeType | ChoiceType\n    >\n  | SlotType;\n\ntype RestrictPropType<T> = T extends string\n  ? SupportControlled<StringType | ChoiceType | JSONLikeType>\n  : T extends boolean\n  ? SupportControlled<BooleanType | JSONLikeType>\n  : T extends number\n  ? SupportControlled<NumberType | JSONLikeType>\n  : PropType;\n\ninterface ComponentTemplate<P>\n  extends Omit<CodeComponentElement<P>, \"type\" | \"name\"> {\n  /**\n   * A preview picture for the template.\n   */\n  previewImg?: string;\n}\n\nexport interface ComponentTemplates<P> {\n  [name: string]: ComponentTemplate<P>;\n}\n\nexport interface ComponentMeta<P> {\n  /**\n   * Any unique string name used to identify that component. Each component\n   * should be registered with a different `meta.name`, even if they have the\n   * same name in the code.\n   */\n  name: string;\n  /**\n   * The name to be displayed for the component in Studio. Optional: if not\n   * specified, `meta.name` is used.\n   */\n  displayName?: string;\n  /**\n   * The javascript name to be used when generating code. Optional: if not\n   * provided, `meta.name` is used.\n   */\n  importName?: string;\n  /**\n   * An object describing the component properties to be used in Studio.\n   * For each `prop`, there should be an entry `meta.props[prop]` describing\n   * its type.\n   */\n  props: { [prop in keyof Partial<P>]: RestrictPropType<P[prop]> } & {\n    [prop: string]: PropType;\n  };\n  /**\n   * The path to be used when importing the component in the generated code.\n   * It can be the name of the package that contains the component, or the path\n   * to the file in the project (relative to the root directory).\n   */\n  importPath: string;\n  /**\n   *  Whether the component is the default export from that path. Optional: if\n   * not specified, it's considered `false`.\n   */\n  isDefaultExport?: boolean;\n  /**\n   * The prop that expects the CSS classes with styles to be applied to the\n   * component. Optional: if not specified, Plasmic will expect it to be\n   * `className`. Notice that if the component does not accept CSS classes, the\n   * component will not be able to receive styles from the Studio.\n   */\n  classNameProp?: string;\n  /**\n   * The prop that receives and forwards a React `ref`. Plasmic only uses `ref`\n   * to interact with components, so it's not used in the generated code.\n   * Optional: If not provided, the usual `ref` is used.\n   */\n  refProp?: string;\n  /**\n   * Default styles to start with when instantiating the component in Plasmic.\n   */\n  defaultStyles?: CSSProperties;\n  /**\n   * Component templates to start with on Plasmic.\n   */\n  templates?: ComponentTemplates<P>;\n}\n\nexport interface ComponentRegistration {\n  component: React.ComponentType<any>;\n  meta: ComponentMeta<any>;\n}\n\ndeclare global {\n  interface Window {\n    __PlasmicComponentRegistry: ComponentRegistration[];\n  }\n}\n\nif (root.__PlasmicComponentRegistry == null) {\n  root.__PlasmicComponentRegistry = [];\n}\n\nexport default function registerComponent<T extends React.ComponentType<any>>(\n  component: T,\n  meta: ComponentMeta<React.ComponentProps<T>>\n) {\n  root.__PlasmicComponentRegistry.push({ component, meta });\n}\n"],"names":[],"mappings":";;;;AAMA,IAAM,IAAI,GAAG,UAAiB,CAAC;AA4K/B,IAAI,IAAI,CAAC,0BAA0B,IAAI,IAAI,EAAE;IAC3C,IAAI,CAAC,0BAA0B,GAAG,EAAE,CAAC;CACtC;SAEuB,iBAAiB,CACvC,SAAY,EACZ,IAA4C;IAE5C,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,EAAE,SAAS,WAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;AAC5D;;;;"}